#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6 on Sun May 25 23:31:23 2008

# Copyright 2008 Martin Manns
# Distributed under the terms of the GNU General Public License
# generated by wxGlade 0.6 on Mon Mar 17 23:22:49 2008

# --------------------------------------------------------------------
# pyspread is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pyspread is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pyspread.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------


"""
_grid
=====

Provides
--------
 1. MainGrid The main grid that includes the entry line and a context menu

"""

import types

import wx

from _pyspread._datastructures import PyspreadGrid

from _pyspread._grid_controller import GridSelectionMixin, \
    GridClipboard, GridManipulationMixin, GridSelectionMask, TextCellEditor

from _pyspread._grid_model import MainGridTable

from _pyspread._grid_view import GridCollisionMixin, TextRenderer, MemoryMap

from _pyspread._events import post_status_text, post_entryline_text
from _pyspread._events import post_entryline_selection
from _pyspread._events import EVT_GRID_MSG, EVT_TABLE_CHANGE, EVT_GRID_SHAPE

from _pyspread._interfaces import Digest, get_default_font, PysInterfaces

from _pyspread._menubars import ContextMenu

from _pyspread.config import odftags, faces

class MainGrid(object):
    """Main grid for spreadsheet application
    
    This is a mask for the wxPython GUI object.
    
    Parameters:
    -----------
     * parent: wx.Window
    \tParent window that has a ToolBar called main_window_toolbar
     * rows: Integer
    \tNumber of grid rows
     * cols: Integer
    \tNumber of grid columns
     * tabs: Integer
    \tNumber of grid tables
    
    """
    
    def __init__(self, parent, rows, cols, tabs):
        
        self.parent = parent
        
        self._main_grid = MGrid(parent, -1, size=(1, 1), dim=(rows, cols, tabs))
        
        self.model = MainGridModel(parent, self._main_grid)
        
        self.controller = MainGridController(parent, self._main_grid, 
                                             self.model)
        
        self.view = MainGridView(parent, self._main_grid, self.model)


# end of class MainGrid

class MainGridModel(object):
    """Model for MainGrid"""
    
    def __init__(self, parent, grid):
        self.parent = parent
        self.grid = grid
        self.pysgrid = grid.pysgrid
        self.macros = grid.pysgrid.sgrid.macros
        self.shape = grid.pysgrid.shape
        
        self.frozen_cells = self.pysgrid.sgrid.frozen_cells
        
        self.load = grid.loadfile
        self.save = grid.savefile
        
        self.parent.Bind(EVT_GRID_SHAPE, self.OnShapeChange)
    
    def OnShapeChange(self, event):
        """Grid shape change event handler"""
        
        self.pysgrid.shape = event.shape
        self.grid.create_rowcol()
        
        event.Skip()

class MainGridController(object):
    """Controller for MainGrid"""
    
    def __init__(self, parent, grid, model):
        self.parent = parent
        self.grid = grid
        self.model = model
        
        self.unredo_mark = grid.pysgrid.unredo.mark
        self.undo = grid.undo
        self.redo = grid.redo
        
        self.selection = GridSelectionMask(self, grid)
        
        self.clipboard = GridClipboard(grid, model)
        
        self.make_cell_visible = grid.MakeCellVisible
        
        self.parent.Bind(EVT_TABLE_CHANGE, self.OnTableChange)
    
    def get_cursor(self):
        """Returns current grid cursor cell"""
        
        return self.grid.key

    def _switch_to_table(self, newtable):
        """Switches grid to table"""
        
        if newtable in xrange(self.model.shape[2]):
            # Update the whole grid including the empty cells
            
            self.grid.current_table = newtable
            
            self.grid.ClearGrid()
            self.grid.Update()
            
            self.grid.zoom_rows()
            self.grid.zoom_cols()
            self.grid.zoom_labels()
            
            post_entryline_text(self.grid, "")

    def set_cursor(self, value):
        """Changes the grid cursor cell."""
        
        if len(value) == 3:
            row, col, tab = value
            self._switch_to_table(tab)
        else:
            row, col = value
        
        if not (row is None and col is None):
            self.grid.MakeCellVisible(row, col)
            self.grid.SetGridCursor(row, col)
        
    cursor = property(get_cursor, set_cursor)

    def select_cell(self, row, col, add_to_selected=False):
        self.grid.SelectBlock(row, col, row, col, addToSelected=add_to_selected)
    
    def select_slice(self, row_slc, col_slc, add_to_selected=False):
        """Selects a slice of cells
        
        Parameters
        ----------
         * row_slc: Integer or Slice
        \tRows to be selected
         * col_slc: Integer or Slice
        \tColumns to be selected
         * add_to_selected: Bool, defaults to False
        \tOld selections are cleared if False
        
        """
        
        if not add_to_selected:
            self.grid.ClearSelection()
        
        if row_slc == row_slc == slice(None, None, None):
            # The whole grid is selected
            self.grid.SelectAll()
            
        elif row_slc.stop is None and col_slc.stop is None:
            # A block is selcted:
            self.grid.SelectBlock(row_slc.start, col_slc.start, 
                                  row_slc.stop-1, col_slc.stop-1)
        else:
            for row in irange(row_slc.start, row_slc.stop, row_slc.step):
                for col in irange(col_slc.start, col_slc.stop, col_slc.step):
                    self.select_cell(row, col, add_to_selected=True)

    def OnTableChange(self, event):
        """Event handler for TableChangeMsg event"""
        
        if event.new_table != self.cursor[2]:
            self.cursor = self.cursor[0], self.cursor[1], event.new_table

class MainGridView(object):
    """View for MainGrid"""

    def __init__(self, parent, grid, model):
        self.parent = parent
        self.grid = grid
        self.model = model
        
        self.update = grid.Update
        self.force_refresh = self.refocus
        
        self.freeze = grid.Freeze
        self.thaw = grid.Thaw
        
        self.get_size = grid.GetSize
        self.memory_map = MemoryMap(self.get_size())
        
        self.get_visiblecell_slice = grid.get_visiblecell_slice
        self.cell_to_rect = grid.CellToRect
        self.get_scroll_pos = grid.GetScrollPos
        self.get_scroll_line_x = grid.GetScrollLineX
        self.get_scroll_line_y = grid.GetScrollLineY
    
    def refocus(self):
        """Refreshes the grid and focuses it"""
        
        self.memory_map.resize(self.get_size())
        self.grid.ForceRefresh()
        self.grid.SetFocus
    
    def get_zoom(self):
        return self.grid.zoom
    
    def set_zoom(self, zoom):
        old_zoom = self.grid.zoom
        
        self.grid.Freeze()
        
        if self.grid.zoom < 1.0 and old_zoom > self.grid.zoom + 0.1:
            old_zoom, self.grid.zoom = self.grid.zoom, self.grid.zoom + 0.1
            self.grid.zoom_rows()
            self.grid.zoom_cols()
            self.grid.zoom_labels()
            
            self.grid.zoom = old_zoom
        
        self.grid.zoom_rows()
        self.grid.zoom_cols()
        self.grid.zoom_labels()
        
        self.refocus()
        
        self.grid.Thaw()
    
    zoom = property(get_zoom, set_zoom)


class MGrid(wx.grid.Grid, 
               GridSelectionMixin, GridCollisionMixin,
               GridManipulationMixin):
    """Main grid for spreadsheet application
    
    This is the wxPython GUI object. The class provides the front-end event
    methods of the grid
    
    Parameters:
    -----------
    parent: wx.Window
    \tParent window that has a ToolBar called main_window_toolbar
    
    dim: 3-tuple, defaults to (1000, 100, 3)
    \tX, Y, Z Dimension of the grid
    
    Methods:
    --------
    create_rowcol
    loadfile
    undo
    redo
    OnScroll
    OnCellEditorShown
    OnCellEditorHidden
    OnText
    EvtChar
    OnCellSelected
    OnContextMenu
    OnMouseMotion
    
    """
    
    def __init__(self, *args, **kwds):
        
        self.parent = args[0]
        self.current_table = 0
        
        dim = kwds.pop("dim")
        
        self.pysgrid = PyspreadGrid(dim)
        self.contextmenu = ContextMenu(parent=self.parent)
        
        self.copy_selection = [] # Cells from last copy operation 
        self.current_table = 0
        self.key = (0, 0, 0)
        self.prev_rowcol = [None, None] # Last cell for tooltip
        
        self.digest = Digest(acceptable_types=[types.UnicodeType])
        
        # Zoom currently affects font size and border line width
        
        self.zoom = 1.0
        
        wx.grid.Grid.__init__(self, *args, **kwds)
        
        self.text_renderer = TextRenderer(self)
        self.SetDefaultRenderer(self.text_renderer)
        
        self.table = MainGridTable(self)
        self.SetTable(self.table, True)
        
        self.EnableGridLines(False)
        
        self.col_label_size = self.GetColLabelSize()
        self.row_label_size = self.GetRowLabelSize()
        
        self.std_row_size = self.GetRowSize(0)
        self.std_col_size = self.GetColSize(0)
        
        self.SetDefaultCellFont(get_default_font())
        self.selection_present = False
        
        # Background key is (width, height, bgbrush, 
        # borderpen_bottom, borderpen_right)
        self.backgrounds = {} 
        
        # Textlabel key is (resultstring, width, height
        # textfont, textattributes)
        self.textlabels = {}
        
        # Event bindings
        
        self.Bind(wx.EVT_TEXT, self.OnText)
        self.Bind(wx.EVT_SIZE, self.OnSize)
        
        self.Bind(wx.grid.EVT_GRID_CELL_RIGHT_CLICK, self.OnContextMenu)
        self.Bind(wx.grid.EVT_GRID_CMD_EDITOR_HIDDEN, self.OnCellEditorHidden)
        self.Bind(wx.grid.EVT_GRID_CMD_EDITOR_SHOWN, self.OnCellEditorShown)
        self.Bind(wx.grid.EVT_GRID_CMD_SELECT_CELL, self.OnCellSelected)
        self.GetGridWindow().Bind(wx.EVT_MOTION, self.OnMouseMotion)
        
        self.Bind(wx.grid.EVT_GRID_ROW_SIZE, self.OnRowSize)
        self.Bind(wx.grid.EVT_GRID_COL_SIZE, self.OnColSize)
        
        self.Bind(wx.EVT_MOUSEWHEEL, self.OnMouseWheel)
        
        self.parent.Bind(EVT_GRID_MSG, self.OnMessage)
        
        # When selection process ends, 
        # the shiftkey or the left mouse button are released
        
        self.GetGridWindow().Bind(wx.EVT_LEFT_UP, self.OnLeftUp)
        self.GetGridWindow().Bind(wx.EVT_KEY_UP, self.OnKeyUp)
        
        ##self.scrollpos = 0, 0 # Remember scroll position
        
    def create_rowcol(self):
        """Creates a new grid"""
        
        operation = (self.create_rowcol, [])
        undo_operation = (self.create_rowcol, [])
        self.pysgrid.unredo.append(undo_operation, operation)
        
        try:
            self.CreateGrid(*self.pysgrid.shape[:2])
        except:
            pass
            
        self.table.ResetView()

    def get_visible_rows(self):
        """Returns a lists of the visible rows"""
        
        pos = self.GetPosition()
        size = self.Size
        
        upper_cell = self.YToRow(pos[1])
        lower_cell = self.YToRow(pos[1] + size[1] - 1)
        
        return xrange(upper_cell, lower_cell)
        
    def get_visible_cols(self):
        """Returns a lists of the visible rows"""
        
        pos = self.GetPosition()
        size = self.Size
        
        left_cell = self.XToCol(pos[0])
        right_cell = self.XToCol(pos[0] + size[0] - 1)
        
        return xrange(left_cell, right_cell)

    def _update_row_sizes(self, interface):
        """Sets the row sizes according to interface data"""
        
        for key in interface.row_styles:
            rowno, tabno = key
            
            size = float(interface.row_styles[key][row_height_tag][:-2])
            dpi_adjusted_size = size * dpi[0]
            
            if tabno == 0:
                self.SetRowSize(rowno, dpi_adjusted_size * self.zoom)
            
            key = (rowno, 0, tabno)
            tag = odftags["rowheight"]
            
            self.pysgrid.create_sgrid_attribute(key, tag)
            setattr(self.pysgrid.sgrid[key], tag, dpi_adjusted_size)
        
    def _update_col_sizes(self, interface):
        """Sets the row sizes according to interface data"""
        
        for k in interface.column_styles:
            colno, tabno = k
            
            size = float(interface.column_styles[k][column_width_tag][:-2])
            dpi_adjusted_size = size * dpi[0]
            
            if tabno == 0:
                self.SetColSize(colno, dpi_adjusted_size * self.zoom)
                
            key = (0, colno, tabno)
            tag = odftags["colwidth"]
            
            self.pysgrid.create_sgrid_attribute(key, tag)
            setattr(self.pysgrid.sgrid[key], tag, dpi_adjusted_size)
        
    def loadfile(self, filename, interface=None):
        """Load file named filename into spreadsheet"""
        
        if interface is None:
            interface = PysInterfaces()
            
        try:
            interface.open(filename)
        except IOError:
            return 0
        
        # Get cell values
        sgrid = interface.get_values()
        self.pysgrid.sgrid = sgrid
        dim = sgrid.shape
        
        self._update_row_sizes(interface)
        self._update_col_sizes(interface)
        
        interface.close()
        

        # Now update the EntryLine to the current string
        pos = tuple(list(self._get_currentcell())+[self.current_table])
        currstr = self.table.GetSource(*pos)
        try:
            post_entryline_text(self, currstr)
        except TypeError:
            post_entryline_text(self, "")
        
        self.create_rowcol()
        self.pysgrid.unredo.reset()
        
        # Set up grid
        self.current_table = 0
        self.zoom = 1.0
        
        self.ClearGrid()
        
        self.zoom_rows()
        self.zoom_cols()
        self.zoom_labels()
        
        self.Update()
        
        # Evaluate everything in order to catch globals
        for key in self.pysgrid.sgrid:
            self.pysgrid[key]
        
        self.pysgrid._resultcache = {}
        self.pysgrid.sgrid.execute_macros(safe_mode=self.pysgrid.safe_mode)
        
        self.Update()

    def savefile(self, filename, interface = None):
        """Same file named filename into spreadsheet"""
        
        if interface is None:
            interface = PysInterfaces()
        
        interface.save(self.pysgrid.sgrid, filename)

    def undo(self):
        """Undo the recent operations"""
        
        self.pysgrid.unredo.undo()
        self.ClearGrid()
        self.Update()
        self.create_rowcol()
    
    def redo(self):
        """Redo the recent operations"""
        
        self.pysgrid.unredo.redo()
        self.ClearGrid()
        self.Update()
        self.create_rowcol()
    
    def OnText(self, event):
        """Text entry event method in grid"""
        
        code = event.GetString()
        
        if code != "":
            try:
                post_entryline_text(self, code)
            except TypeError: 
                post_entryline_text(self, "")
        
        event.Skip()
        
    def OnCellEditorShown(self, event):
        """CellEditor event method sets editor content to Python code"""
        
        row, col = event.Row, event.Col
        self.key = (row, col, self.current_table)
        
        event.Skip()
    
    def OnCellEditorHidden(self, event):
        """When a cell editor is hidden, the grid is refreshed"""
        
        self.Freeze()
        self.Refresh()
        self.Thaw()
        event.Skip()
    
    def OnCellSelected(self, event):
        """Cell selection event method"""
        
        row, col, tab = event.Row, event.Col, self.current_table
        self.key = row, col, tab
        
        self.scrollpos = self.GetScrollPos(wx.HORIZONTAL), \
                         self.GetScrollPos(wx.VERTICAL)
        
        # Set cell editor
        
        self.SetCellEditor(row, col, TextCellEditor(parent=self)) 
         
        # Put code into entry line
        
        try: 
            currstr = self.table.GetSource(*self.key)
        except IndexError: 
            currstr = ""
        
        try: 
            post_entryline_text(self.parent, currstr)
        except TypeError: 
            post_entryline_text(self.parent, "")
        
        self._update_attribute_toolbar()
        
        event.Skip()

    
    def _update_attribute_toolbar(self):
        """Update attribute toolbar"""
        
        self.Freeze()
        self.parent.attributes_toolbar.Freeze()
        
        post_entryline_selection(self, -1, -1)
        
        
        pysgrid = self.pysgrid
        
        textfont = get_default_font()
        
        if pysgrid.get_sgrid_attr(self.key, "textfont"):
            nativefontinfo = wx.NativeFontInfo()
            nativefontinfo.FromString(pysgrid.get_sgrid_attr(self.key, "textfont"))
            textfont.SetNativeFontInfo(nativefontinfo)
        
        textattributes = pysgrid.get_sgrid_attr(self.key, "textattributes")
        
        bgbrush_data = pysgrid.get_sgrid_attr(self.key, "bgbrush")
        
        borderpen_data = pysgrid.get_sgrid_attr(self.key, "borderpen_bottom")
        try:
            self.parent.attributes_toolbar.update(\
                textfont=textfont, textattributes=textattributes,
                bgbrush_data=bgbrush_data, borderpen_data=borderpen_data)
        except NameError:
            # Attributes toolbar not yet created
            pass
        
        self.Refresh()
        
        self.Thaw()
        self.parent.attributes_toolbar.Thaw()

    def OnContextMenu(self, event):
        """Context Menu event method calls context menu"""
        
        self.PopupMenu(self.contextmenu)
        #contextmenu.Destroy()
        event.Skip()
    
    def OnMouseMotion(self, event):
        """Mouse motionselection event method puts Python code into statusbar"""
        
        pos_x, pos_y = self.CalcUnscrolledPosition(event.GetPosition())
        row = self.YToRow(pos_y)
        col = self.XToCol(pos_x)
        
        if (row, col) != self.prev_rowcol and row >= 0 and col >= 0:
            self.prev_rowcol[:] = [row, col]
            
            hinttext = self.table.GetSource(row, col)
            
            if hinttext is None:
                hinttext = ''
            try:
                post_status_text(self.parent, hinttext)
            except TypeError:
                pass
        event.Skip()
            
    
    def OnRowSize(self, event):
        """Stores the size of a currently changed row in 1st col"""
        
        self.backgrounds = {}
        
        rowno = event.GetRowOrCol()
        tabno = self.current_table
        
        tag = odftags["rowheight"]
        
        rowsize = self.GetRowSize(rowno) / self.zoom
        
        try:
            self.pysgrid.sgrid.rows[rowno][tag] = rowsize
        except KeyError:
            self.pysgrid.sgrid.rows[rowno] = {}
            self.pysgrid.sgrid.rows[rowno][tag] = rowsize
        except AttributeError:
            self.pysgrid.sgrid.rows = {}
            self.pysgrid.sgrid.rows[rowno] = {}
            self.pysgrid.sgrid.rows[rowno][tag] = rowsize
        
        event.Skip()
        
    def OnColSize(self, event):
        """Stores the size of a currently changed column in 1st row attrib"""
        
        self.backgrounds = {}
        
        colno = event.GetRowOrCol()
        tabno = self.current_table
        
        tag = odftags["colwidth"]
        
        colsize = self.GetColSize(colno) / self.zoom
        
        try:
            self.pysgrid.sgrid.cols[colno][tag] = colsize
        except KeyError:
            self.pysgrid.sgrid.cols[colno] = {}
            self.pysgrid.sgrid.cols[colno][tag] = colsize
        except AttributeError:
            self.pysgrid.sgrid.cols = {}
            self.pysgrid.sgrid.cols[colno] = {}
            self.pysgrid.sgrid.cols[colno][tag] = colsize

        event.Skip()
    
    def OnLeftUp(self, event):
        """Left mouse button up event handler"""
        
        event.Skip()
    
    def OnKeyUp(self, event):
        """Key released event handler"""
        
        event.Skip()
    
    def zoom_rows(self):
        """Zooms grid rows"""
        
        tabno = self.current_table
        tag = odftags["rowheight"]
        
        sgrid = self.pysgrid.sgrid
        
        pos = self.CalcUnscrolledPosition(self.GetScrollX(0), 
                                          self.GetScrollY(0))
        
        self.SetDefaultRowSize(self.std_row_size * self.zoom, 
                               resizeExistingRows=True)
        self.SetRowLabelSize(self.row_label_size * self.zoom)
        
        if not hasattr(sgrid, "rows"):
            return
        
        for rowno in sgrid.rows:
            if tag in sgrid.rows[rowno]:
                zoomed_row_size = sgrid.rows[rowno][tag] * self.zoom
                self.SetRowSize(rowno, zoomed_row_size)
        
        self.MakeCellVisible(*self.key[:2])
        
    def zoom_cols(self):
        """Zooms grid columns"""
        
        tabno = self.current_table
        tag = odftags["colwidth"]
        
        sgrid = self.pysgrid.sgrid
        
        pos = self.CalcUnscrolledPosition(self.GetScrollX(0), 
                                          self.GetScrollY(0))
        
        self.SetDefaultColSize(self.std_col_size * self.zoom, 
                               resizeExistingCols=True)
        self.SetColLabelSize(self.col_label_size * self.zoom)
        
        if not hasattr(sgrid, "cols"):
            return
        
        for colno in sgrid.cols:
            if tag in sgrid.cols[colno]:
                zoomed_col_size = sgrid.cols[colno][tag] * self.zoom
                self.SetColSize(colno, zoomed_col_size)
        
        self.MakeCellVisible(*self.key[:2])

    def zoom_labels(self):
        """Zooms grid labels"""
        
        labelfont = self.GetLabelFont()
        labelfont.SetPointSize(max(1, 
                            int(round(faces['size'] * self.zoom))))
        self.SetLabelFont(labelfont)
        
    def OnMouseWheel(self, event):
        """Event handler for mouse wheel actions
        
        Invokes zoom when mouse when Ctrl is also pressed
        
        """
        
        if event.ControlDown():
            zoomstep = 0.05 * event.LinesPerAction
            
            if event.WheelRotation > 0:
                self.zoom += zoomstep
            else:
                if self.zoom > 0.6:
                    self.zoom -= zoomstep
            
            self.backgrounds = {}
            
            self.parent.MainGrid.view.zoom = self.zoom
            
        else:
            event.Skip()

    def OnSize(self, event):
        """Resize event handler"""
        
        self.parent.MainGrid.view.memory_map.resize(event.GetSize())
        
        event.Skip()

    def OnMessage(self, event):
        """Updates the pysgrid from event"""
        
        self.pysgrid[self.key] = event.text

# end of class MainGrid

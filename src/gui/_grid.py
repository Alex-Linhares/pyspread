#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2008 Martin Manns
# Distributed under the terms of the GNU General Public License
# generated by wxGlade 0.6 on Mon Mar 17 23:22:49 2008

# --------------------------------------------------------------------
# pyspread is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pyspread is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pyspread.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

"""
_grid
=====

Provides
--------
 1. Grid: The main grid of pyspread
 2. MainWindowEventHandlers: Event handlers for Grid

"""

import wx.grid

from _events import *

from _grid_table import GridTable
from _grid_renderer import GridRenderer
from _grid_mixins import GridCollisionMixin
from _gui_interfaces import GuiInterfaces

from model.model import CodeArray

from actions._grid_actions import AllGridActions

class Grid(wx.grid.Grid, GridCollisionMixin):
    """Pyspread's main grid"""

    def __init__(self, main_window, *args, **kwargs):
        self.main_window = main_window
        
        self._states()
        
        self.interfaces = GuiInterfaces(self.main_window)

        dimensions = kwargs.pop("dimensions")
        
        wx.grid.Grid.__init__(self, main_window, *args, **kwargs)
        
        # Create new grid
        self.code_array = CodeArray(dimensions)
        post_command_event(self, GridActionNewMsg, code_array=self.code_array)

        _grid_table = GridTable(self, self.code_array)
        self.SetTable(_grid_table, True)

        # Grid renderer draws the grid
        self.grid_renderer = GridRenderer(self.code_array)
        self.SetDefaultRenderer(self.grid_renderer)
        
        # Handler classes contain event handler methods
        self.handlers = GridEventHandlers(self)
        self.cell_handlers = GridCellEventHandlers(self)
        
        # Grid actions
        
        self.actions = AllGridActions(self, self.code_array)
        
        # Layout and bindings
        
        self._layout()
        self._bind()
    
    def _states(self):
        """Sets grid states"""
        
        # The currently visible table
        self.current_table = 0
        
    def _layout(self):
        """Initial layout of grid"""
        
        self.EnableGridLines(False)
        
    
    def _bind(self):
        """Bind events to handlers"""
        
        main_window = self.main_window
        
        handlers = self.handlers
        c_handlers = self.cell_handlers
        
        # Grid events
        
        self.GetGridWindow().Bind(wx.EVT_MOTION, handlers.OnMouseMotion)
        self.Bind(wx.EVT_SCROLLWIN, handlers.OnScroll)
        
        # Cell code events
        
        # Cell attribute events
        
        main_window.Bind(EVT_COMMAND_FONT, c_handlers.OnCellFont)
        main_window.Bind(EVT_COMMAND_FONTSIZE, c_handlers.OnCellFontSize)
        main_window.Bind(EVT_COMMAND_FONTBOLD, c_handlers.OnCellFontBold)
        main_window.Bind(EVT_COMMAND_FONTITALICS, c_handlers.OnCellFontItalics)
        main_window.Bind(EVT_COMMAND_FONTUNDERLINE, 
                    c_handlers.OnCellFontUnderline)
        main_window.Bind(EVT_COMMAND_FONTSTRIKETHROUGH, 
                    c_handlers.OnCellFontStrikethrough)
        main_window.Bind(EVT_COMMAND_FROZEN, c_handlers.OnCellFrozen)
        main_window.Bind(EVT_COMMAND_JUSTIFICATION, 
                    c_handlers.OnCellJustification)
        main_window.Bind(EVT_COMMAND_ALIGNMENT, c_handlers.OnCellAlignment)
        main_window.Bind(EVT_COMMAND_BORDERCHOICE, 
                    c_handlers.OnCellBorderChoice)
        main_window.Bind(EVT_COMMAND_BORDERWIDTH, c_handlers.OnCellBorderWidth)
        main_window.Bind(EVT_COMMAND_BORDERCOLOR, c_handlers.OnCellBorderColor)
        main_window.Bind(EVT_COMMAND_BACKGROUNDCOLOR, 
                    c_handlers.OnCellBackgroundColor)
        main_window.Bind(EVT_COMMAND_TEXTCOLOR, c_handlers.OnCellTextColor)
        main_window.Bind(EVT_COMMAND_TEXTROTATATION, 
                    c_handlers.OnCellTextRotation)
        
        # Cell selection events

        self.Bind(wx.grid.EVT_GRID_CMD_SELECT_CELL, c_handlers.OnCellSelected)
        
        # Grid view events
        
        main_window.Bind(EVT_COMMAND_REFRESH_SELECTION, 
                    handlers.OnRefreshSelectedCells)
        main_window.Bind(EVT_COMMAND_DISPLAY_GOTO_CELL_DIALOG, 
                    handlers.OnDisplayGoToCellDialog)
        main_window.Bind(EVT_COMMAND_GOTO_CELL, handlers.OnGoToCell)
        main_window.Bind(EVT_COMMAND_ZOOM_IN, handlers.OnZoomIn)
        main_window.Bind(EVT_COMMAND_ZOOM_OUT, handlers.OnZoomOut)
        main_window.Bind(EVT_COMMAND_ZOOM_STANDARD, handlers.OnZoomStandard)
        
        # Find events
        
        main_window.Bind(EVT_COMMAND_FIND, handlers.OnFind)
        main_window.Bind(EVT_COMMAND_REPLACE, handlers.OnShowFindReplace)
        
        # Grid change events
        
        main_window.Bind(EVT_COMMAND_INSERT_ROWS, handlers.OnInsertRows)
        main_window.Bind(EVT_COMMAND_INSERT_COLS, handlers.OnInsertCols)
        main_window.Bind(EVT_COMMAND_INSERT_TABS, handlers.OnInsertTabs)
        
        main_window.Bind(EVT_COMMAND_DELETE_ROWS, handlers.OnDeleteRows)
        main_window.Bind(EVT_COMMAND_DELETE_COLS, handlers.OnDeleteCols)
        main_window.Bind(EVT_COMMAND_DELETE_TABS, handlers.OnDeleteTabs)
        
        main_window.Bind(EVT_COMMAND_SHOW_RESIZE_GRID_DIALOG, 
                                                  handlers.OnResizeGridDialog)
        
        # Undo/Redo events

        main_window.Bind(EVT_COMMAND_UNDO, handlers.OnUndo)
        main_window.Bind(EVT_COMMAND_REDO, handlers.OnRedo)
    
    _get_selection = lambda self: self.actions.get_selection()
    selection = property(_get_selection, doc="Grid selection")

class GridCellEventHandlers(object):
    """Contains grid cell event handlers incl. attribute events"""
    
    def __init__(self, grid):
        self.grid = grid
    
    # Cell code entry events
    
    def OnCellText(self, event):
        """Text entry event handler"""
        
        code = event.GetString()
        
##        if code != "":
##            try:
##                post_entryline_text(self, code)
##            except TypeError: 
##                post_entryline_text(self, "")
        
        event.Skip()

    # Cell attribute events

    def OnCellFont(self, event):
        """Cell font event handler"""
        
        raise NotImplementedError
        
        event.Skip()
        
    def OnCellFontSize(self, event):
        """Cell font size event handler"""
        
        raise NotImplementedError
        
        event.Skip()
        
    def OnCellFontBold(self, event):
        """Cell font bold event handler"""
        
        selection = self.grid.selection
        table = self.grid.current_table
        
        # Determine if the last selection action toogled selection to bold
        
        last_cell_attr = (None, {})
        
        for cell_attr in reversed(self.grid.code_array.cell_attributes):
            last_cell_attr = cell_attr
            break
        
        all_bold = last_cell_attr[0] == selection and \
                   "font-weight" in last_cell_attr[1] and \
                   last_cell_attr[1]["font-weight"] == "bold"
        
        # If yes then toggle to normal
        
        if all_bold:
            target_weight = "normal"
        else:
            target_weight = "bold"
            
        style = {"font-weight": target_weight}
        
        # Change model
        
        self.grid.actions.attribute_actions.set_text_style(selection, table, 
                                                           style)
        
        event.Skip()
        
    def OnCellFontItalics(self, event):
        """Cell font italics event handler"""
        
        raise NotImplementedError
        
        event.Skip()
        
    def OnCellFontUnderline(self, event):
        """Cell font underline event handler"""
        
        raise NotImplementedError
        
        event.Skip()
        
    def OnCellFontStrikethrough(self, event):
        """Cell font strike through event handler"""
        
        raise NotImplementedError
        
        event.Skip()
    
    def OnCellFrozen(self, event):
        """Cell frozen event handler"""
        
        raise NotImplementedError
        
        event.Skip()
    
    def OnCellJustification(self, event):
        """Horizontal cell justification event handler"""
        
        raise NotImplementedError
        
        event.Skip()
    
    def OnCellAlignment(self, event):
        """Vertical cell alignment event handler"""
        
        raise NotImplementedError
        
        event.Skip()
    
    def OnCellBorderChoice(self, event):
        """Cell border choice event handler"""
        
        raise NotImplementedError
        
        event.Skip()
    
    def OnCellBorderWidth(self, event):
        """Cell border width event handler"""
        
        raise NotImplementedError
        
        event.Skip()
        
    def OnCellBorderColor(self, event):
        """Cell border color event handler"""
        
        raise NotImplementedError
        
        event.Skip()
        
    def OnCellBackgroundColor(self, event):
        """Cell background color event handler"""
        
        raise NotImplementedError
        
        event.Skip()

    def OnCellTextColor(self, event):
        """Cell text color event handler"""
        
        raise NotImplementedError
        
        event.Skip()

    def OnCellTextRotation(self, event):
        """Cell text rotation event handler"""
        
        raise NotImplementedError
        
        event.Skip()
        
    # Cell edit event handlers
    
    def OnCellEditorShown(self, event):
        """Cell editor shown event handler"""
        
        raise NotImplementedError
        
        event.Skip()
        
    def OnCellEditorHidden(self, event):
        """Cell editor hidden event handler"""
        
        raise NotImplementedError
        
        event.Skip()
    
    # Cell selection event handlers
    
    def OnCellSelected(self, event):
        """Cell selection event handler"""
        
        #self.grid.Refresh()
        
        event.Skip()
    

class GridEventHandlers(object):
    """Contains grid event handlers"""
    
    def __init__(self, grid):
        self.grid = grid
        self.interfaces = grid.interfaces
    
    def OnMouseMotion(self, event):
        """Mouse motion event handler"""
        
        grid = self.grid
        
        pos_x, pos_y = grid.CalcUnscrolledPosition(event.GetPosition())
        
        row = grid.YToRow(pos_y)
        col = grid.XToCol(pos_x)
        tab = grid.current_table
        
        grid.actions.on_mouse_over((row, col, tab))
        
        event.Skip()
        
    def OnScroll(self, event):
        """Event handler for grid scroll event"""
        
        event.Skip()
        
    # Grid view events
    
    def OnDisplayGoToCellDialog(self, event):
        """Shift a given cell into view"""
        
        self.interfaces.display_gotocell()
        
        event.Skip()    

    def OnGoToCell(self, event):
        """Shift a given cell into view"""
        
        row, col, tab = event.key
        
        self.grid.current_table = tab
        
        self.grid.SetGridCursor(row, col)
        self.grid.MakeCellVisible(row, col)
        
        event.Skip()

    def OnRefreshSelectedCells(self, event):
        """Event handler for refreshing the selected cells via menu"""
        
        raise NotImplementedError
        
        event.Skip()
        
    def OnZoomIn(self, event):
        """Event handler for increasing grid zoom"""
        
        raise NotImplementedError
        
        event.Skip()

    def OnZoomOut(self, event):
        """Event handler for decreasing grid zoom"""
        
        raise NotImplementedError
        
        event.Skip()
        
    def OnZoomStandard(self, event):
        """Event handler for resetting grid zoom"""
        
        raise NotImplementedError
        
        event.Skip()

    def OnContextMenu(self, event):
        """Context menu event handler"""
        
        raise NotImplementedError
        
        #self.PopupMenu(self.contextmenu)
        
        event.Skip()
    
    def OnMouseWheel(self, event):
        """Event handler for mouse wheel actions
        
        Invokes zoom when mouse when Ctrl is also pressed
        
        """
        
        if event.ControlDown():
            raise NotImplementedError
        
        event.Skip()
    
    # Find events

    def OnFind(self, event):
        """Find functionality should be in interfaces"""
        
        raise NotImplementedError
                
        event.Skip()
        
    def OnFindClose(self, event):
        """Refreshes the grid after closing the find dialog"""
        
        raise NotImplementedError
        
        event.Skip()

    def OnShowFindReplace(self, event):
        """Calls the find-replace dialog"""
        
        raise NotImplementedError
        
        event.Skip()

    # Grid change events
    
    def _get_no_rowscols(self, bbox):
        """Returns tuple of number of rows and cols from bbox"""
        
        if bbox is None:
            return 1, 1
        else:
            (bb_top, bb_left), (bb_bottom, bb_right) = bbox
            if bb_top is None:
                bb_top = 0
            if bb_left is None:
                bb_left = 0
            if bb_bottom is None:
                bb_bottom = self.grid.code_array.shape[0] - 1
            if bb_right is None:
                bb_right = self.grid.code_array.shape[1] - 1
            
            return bb_bottom - bb_top, bb_right - bb_left
        
    
    def OnInsertRows(self, event):
        """Insert the maximum of 1 and the number of selected rows"""
        
        no_rows, _ = self._get_no_rowscols(self.grid.selection.get_bbox())

        cursor = self.grid.actions.cursor
        
        self.grid.actions.insert_rows(cursor[0], no_rows)
        
        self.grid.GetTable().ResetView()
        
        event.Skip()
    
    def OnInsertCols(self, event):
        """Inserts the maximum of 1 and the number of selected columns"""
        
        _, no_cols = self._get_no_rowscols(self.grid.selection.get_bbox())
            
        cursor = self.grid.actions.cursor
        
        self.grid.actions.insert_cols(cursor[1], no_cols)
        
        self.grid.GetTable().ResetView()
        
        event.Skip()
    
    def OnInsertTabs(self, event):
        """Insert one table into grid"""
        
        self.grid.actions.insert_tabs(self.grid.current_table, 1)
        
        event.Skip()
    
    def OnDeleteRows(self, event):
        """Deletes rows from all tables of the grid"""
        
        no_rows, _ = self._get_no_rowscols(self.grid.selection.get_bbox())
            
        cursor = self.grid.actions.cursor
        
        self.grid.actions.delete_rows(cursor[0], no_rows)
        
        self.grid.GetTable().ResetView()
        
        event.Skip()
    
    def OnDeleteCols(self, event):
        """Deletes columnss from all tables of the grid"""
        
        _, no_cols = self._get_no_rowscols(self.grid.selection.get_bbox())
            
        cursor = self.grid.actions.cursor
        
        self.grid.actions.delete_cols(cursor[1], no_cols)
        
        self.grid.GetTable().ResetView()
        
        event.Skip()
    
    def OnDeleteTabs(self, event):
        """Deletes tables"""
        
        self.grid.actions.delete_tabs(self.grid.current_table, 1)
        
        event.Skip()
    
    def OnResizeGridDialog(self, event):
        """Resizes current grid by appending/deleting rows, cols and tables"""
        
        # Get grid dimensions
        
        new_shape = self.interfaces.get_dimensions_from_user(no_dim=3)
        
        if new_shape is None:
            return
        
        self.grid.actions.change_grid_shape(new_shape)
        
        self.grid.GetTable().ResetView()
        
        statustext = "Grid dimensions changed to " + str(new_shape) + "."
        post_command_event(self.grid.main_window, StatusBarMsg, text=statustext)
        
        event.Skip()

    # Grid attribute events

    def OnRowSize(self, event):
        """Row size event handler"""
        
        raise NotImplementedError
        
        event.Skip()
        
    def OnColSize(self, event):
        """Column size event handler"""
        
        raise NotImplementedError
        
        event.Skip()

    # Undo/Redo events

    def OnUndo(self, event):
        """Calls the grid undo method"""
        
        self.grid.actions.undo()
        self.grid.Refresh()
        
    def OnRedo(self, event):
        """Calls the grid redo method"""
        
        self.grid.actions.redo()
        self.grid.Refresh()

    
# End of class GridEventHandlers



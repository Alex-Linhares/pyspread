#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6 on Sun May 25 23:31:23 2008

# Copyright 2008 Martin Manns
# Distributed under the terms of the GNU General Public License
# generated by wxGlade 0.6 on Mon Mar 17 23:22:49 2008

# --------------------------------------------------------------------
# pyspread is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pyspread is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pyspread.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------


"""
_grid_actions.py
=======================

Module for main main grid level actions.
All non-trivial functionality that results from grid actions
and belongs to the grid only goes here.

Provides:
---------
  1. 
  

"""

class TableRowActions(object):
    """Table row controller prototype"""

    def __init__(self):
        pass

    def set_row_height(self, row, height):
        """Sets row height"""
        
        raise NotImplementedError

    def add_rows(self, row, no_rows=1):
        """Adds no_rows rows before row, appends if row > maxrows"""
        
        raise NotImplementedError

    def delete_rows(self, row, no_rows=1):
        """Deletes no_rows rows"""
        
        raise NotImplementedError


class TableColumnActions(object):
    """Table column controller prototype"""

    def __init__(self):
        pass

    def set_col_width(self, row, width):
        """Sets column width"""
        
        raise NotImplementedError

    def add_cols(self, col, no_cols=1):
        """Adds no_cols columns before col, appends if col > maxcols"""
        
        raise NotImplementedError

    def delete_cols(self, col, no_cols=1):
        """Deletes no_cols column"""
        
        raise NotImplementedError


class TableTabActions(object):
    """Table tab controller prototype"""

    def __init__(self):
        pass

    def add_tabs(self, tab, no_tabs=1):
        """Adds no_tabs tabs before table, appends if tab > maxtabs"""
        
        raise NotImplementedError

    def delete_tabs(self, tab, no_tabs=1):
        """Deletes no_tabs tabs"""
        
        raise NotImplementedError

class TableActions(TableRowActions, TableColumnActions, 
                      TableTabActions):
    """Table controller prototype"""

    def __init__(self, Actions):
        pass
        
    def OnShapeChange(self, event):
        """Grid shape change event handler"""
        
        new_rows, new_cols, new_tabs = event.shape
        old_rows, old_cols, old_tabs = self.pysgrid.shape
        
        if new_rows > old_rows:
            self.add_rows(old_rows, new_rows - old_rows)
        elif new_rows < old_rows:
            self.delete_rows(old_rows, old_rows - new_rows)
        
        if new_cols > old_cols:
            self.add_cols(old_cols, new_cols - old_cols)
        elif new_cols < old_cols:
            self.delete_cols(old_cols, old_cols - new_cols)
            
        if new_tabs > old_tabs:
            self.add_tabs(old_tabs, new_tabs - old_tabs)
        elif new_tabs < old_tabs:
            self.delete_tabs(old_tabs, old_tabs - new_tabs)
        
        self.pysgrid.shape = new_rows, new_cols, new_tabs
        
        event.Skip()

    
class MacroActions(object):
    """Macro controller prototype"""

    def __init__(self):
        pass
        

    def set_macros(selfself, macro_string):
        """Sets macro string"""
    
        raise NotImplementedError


class UnRedoActions(object):
    """Undo and redo operations on grid level"""
    
    def undo(self):
        pass
        
    def redo(self):
        pass
        


class GridActions(object):
    """Grid level grid actions"""
    
    def zoom(self):
        pass
    
    def get_cursor(self):
        """Returns current grid cursor cell"""
        
        return self.grid.key

    def _switch_to_table(self, newtable):
        """Switches grid to table"""
        
        if newtable in xrange(self.Actions.shape[2]):
            # Update the whole grid including the empty cells
            
            self.grid.current_table = newtable
            
            self.grid.ClearGrid()
            self.grid.Update()
            
            self.grid.zoom_rows()
            self.grid.zoom_cols()
            self.grid.zoom_labels()
            
            post_entryline_text(self.grid, "")

    def set_cursor(self, value):
        """Changes the grid cursor cell."""
        
        if len(value) == 3:
            row, col, tab = value
            self._switch_to_table(tab)
        else:
            row, col = value
        
        if not (row is None and col is None):
            self.grid.MakeCellVisible(row, col)
            self.grid.SetGridCursor(row, col)
        
    cursor = property(get_cursor, set_cursor)
    
class GridSelectionActions(object):
    """Actions that affect the grid selection"""
    
    def select_cell(self, row, col, add_to_selected=False):
        self.grid.SelectBlock(row, col, row, col, addToSelected=add_to_selected)
    
    def select_slice(self, row_slc, col_slc, add_to_selected=False):
        """Selects a slice of cells
        
        Parameters
        ----------
         * row_slc: Integer or Slice
        \tRows to be selected
         * col_slc: Integer or Slice
        \tColumns to be selected
         * add_to_selected: Bool, defaults to False
        \tOld selections are cleared if False
        
        """
        
        if not add_to_selected:
            self.grid.ClearSelection()
        
        if row_slc == row_slc == slice(None, None, None):
            # The whole grid is selected
            self.grid.SelectAll()
            
        elif row_slc.stop is None and col_slc.stop is None:
            # A block is selcted:
            self.grid.SelectBlock(row_slc.start, col_slc.start, 
                                  row_slc.stop-1, col_slc.stop-1)
        else:
            for row in irange(row_slc.start, row_slc.stop, row_slc.step):
                for col in irange(col_slc.start, col_slc.stop, col_slc.step):
                    self.select_cell(row, col, add_to_selected=True)
    


#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6 on Sun May 25 23:31:23 2008

# Copyright 2008 Martin Manns
# Distributed under the terms of the GNU General Public License
# generated by wxGlade 0.6 on Mon Mar 17 23:22:49 2008

# --------------------------------------------------------------------
# pyspread is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pyspread is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pyspread.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------


"""
_selection_actions.py
=======================

Module for selection level grid actions.

Provides:
---------
  1. AttributeActions
  

"""

## GETTERS!

class TextActions(object):
    """Cell text controller prototype"""
    
    def set_text_font(self, key, font):
        """Sets text font for key cell"""
        
        raise NotImplementedError
        
    def set_text_size(self, key, size):
        """Sets text font for key cell"""
        
        raise NotImplementedError
        
    def set_text_align(self, key, align):
        """Sets text font for key cell"""
        
        raise NotImplementedError    
    
    def set_text_color(self, key, color):
        """Sets text font for key cell"""
        
        raise NotImplementedError
    
    def set_text_style(self, selection, table, style):
        """Sets text font for key cell"""
        
        if selection is not None:
            self.code_array.cell_attributes.append((selection, table, style))
            print self.code_array.cell_attributes
    
    def set_text_frozenstate(self, key, frozenstate):
        """Sets text font for key cell"""
        
        raise NotImplementedError
    
class BackgroundActions(object):
    """Cell background controller prototype"""

    def set_background_color(self, key, color):
        """Sets text font for key cell"""
        
        raise NotImplementedError
    
    
class BorderActions(object):
    """Cell border controller prototype"""

    def set_cell_border_color(self, key, color):
        """Sets text font for key cell"""
        
        raise NotImplementedError
        
    def set_cell_right_border_width(self, key, width):
        """Sets text font for key cell"""
        
        raise NotImplementedError

    def set_cell_lower_border_width(self, key, width):
        """Sets text font for key cell"""
        
        raise NotImplementedError


class AttributeActions(TextActions, BackgroundActions, BorderActions):
    """Mixin class Cell attribute controller prototype"""

    pass

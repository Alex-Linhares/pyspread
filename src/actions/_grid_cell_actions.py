
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6 on Sun May 25 23:31:23 2008

# Copyright 2008 Martin Manns
# Distributed under the terms of the GNU General Public License
# generated by wxGlade 0.6 on Mon Mar 17 23:22:49 2008

# --------------------------------------------------------------------
# pyspread is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pyspread is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pyspread.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import wx

"""
_grid_cell_actions.py
=======================

Module for cell level main grid level actions.

Provides:
---------
  1. CellActions: Changes to cell code
  
"""

class CellActions(object):
    """Mixin class that supplies Cell code additions, changes and deletion"""
        
    def set_cell_code_fast(self,  key,  code):
        """Sets code for key cell"""
        
        self.code_array.__setitem__(key, code, fast=True)
        
    def delete_cell(self,  key):
        """Deletes key cell"""
        
        try:
            self.code_array.pop(key)
        except KeyError:
            pass
    
    def set_cell_attr(self, selection, table, attr):
        """Sets cell attr for key cell
        
        Parameters
        ----------
        
        attr: dict
        \tContains cell attribute keys
        \tkeys in ["borderpen_bottom", "borderpen_right", "bgbrush", "textfont",
        \t"pointsize", "fontweight", "fontstyle", "textcolor", "underline",
        \t"strikethrough", "angle", "column-width", "row-height", 
        \t"vertical_align", "justification", "frozen"]
        
        """
        
        if selection is not None:
            self.code_array.cell_attributes.append((selection, table, attr))
    
    
    def toggle_attr(self, attr):
        """Toggles an attribute attr"""
        
        selection = self.grid.selection
        cell_attributes = self.grid.code_array.cell_attributes
        
        if selection:
            attrs = {attr: self.get_new_selection_attr_state(selection, attr)}
            
        else:
            attrs = {attr: self.get_new_cell_attr_state(self.cursor, attr)}
            
            # Add current cell to selection so that it gets changed
            selection.cells.append(self.cursor[:2])
        
        table = self.grid.current_table
        
        # Change model
        
        self.grid.actions.set_cell_attr(selection, table, attrs)
    
    # Only cell attributes that can be toogled are contained
    
    attr_toggle_values = { \
        "fontweight": [wx.NORMAL, wx.BOLD],
        "fontstyle": [wx.NORMAL, wx.ITALIC],
        "underline": [True, False],
        "strikethrough": [True, False],
        "vertical_align": ["top", "middle", "bottom"],
        "justification": ["left", "center", "right"],
        "frozen": [True, False],
        }
    
    def get_new_cell_attr_state(self, key, attr_key):
        """Returns new attr cell state for toggles
        
        Parameters
        ----------
        key: 3-Tuple
        \tCell for which attr toggle shall be returned
        attr_key: Hashable
        \tAttribute key
        
        """
        
        cell_attributes = self.grid.code_array.cell_attributes
        attr_values = self.attr_toggle_values[attr_key]
        
        # Map attr_value to next attr_value
        attr_map = dict(zip(attr_values, attr_values[1:] + attr_values[:1]))
        
        # Return next value from attr_toggle_values value list
        
        return attr_map[cell_attributes[key][attr_key]]
    
    def get_new_selection_attr_state(self, selection, attr_key):
        """Returns new attr selection state for toggles
        
        Parameters
        ----------
        selection: Selection object
        \tSeelction for which attr toggle shall be returned
        attr_key: Hashable
        \tAttribute key
        
        """
        
        cell_attributes = self.grid.code_array.cell_attributes
        attr_values = self.attr_toggle_values[attr_key]
        
        # Map attr_value to next attr_value
        attr_map = dict(zip(attr_values, attr_values[1:] + attr_values[:1]))
        
        selection_attrs = \
            (attr for attr in cell_attributes if attr[0] == selection)
                    
        attrs = {}
        for selection_attr in selection_attrs:
            attrs.update(selection_attr[2])
            
        if attr_key in attrs:
            return attr_map[attrs[attr_key]]
            
        else:
            # Default next value
            return self.attr_toggle_values[attr_key][1]
